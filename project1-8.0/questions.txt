6 A.
	The following are the SAX events triggered for the give xml.
	startDocument();
	startElement(“student”, {(“type”, ”undergrad”)});
	startElement(“name”);
	characters(“John Harvard”);
	endElement(“name”);
	startElement(“email”);
	characters(“john@harvard.edu”);
	endElement(“email”);
	startElement(“phone”);
	endElement(“phone”);
	startElement(“grades”);
	startElement(“project”, {(“number”, “1”)});
	characters(“137”);
	endElement(“project”);
	endElement(“grades”);
	endElement(“student”);
	
==============================================================================================================
10 A.

	element			:: = STag content ETag
	content		 	:: = (element | alphanumeric | whitespace character)*
	STag			:: = ‘<’ Name ‘>’ 
	ETag			:: = ‘</’ Name ’>’
	Name			:: = ( alphabetical )*
	alphanumeric 	:: = ( alphabetical | numerical )
	alphabetical	:: = ( ‘a’ - ‘z’ | ‘A’ - ‘Z’ )
	numerical		:: = ( ‘0’ - ‘9’ )

	
===============================================================================================================
	
12 A.
	By iteratively checking and skipping over whitespace characters from the beginning of the file (skipConsecutiveWhitespaces()), till either a non-whitespace character appears or end of file is reached.
	
===============================================================================================================

14 A.
	The code for parsing the Name from the tag is already provided by the course. The parser is continued to encounter any non-whitespace character that may encounter before touching '>'.
	
	If encountered any non-whitespace character is encountered the parser is allowed to accumlate those character till it encounters another whitespace character or '=' sign and the accumlated string is stored as attribute name, 
	simillarly after reaching '=' parser skips over consective whitespace characters if any present and awaits for the arival of '"' and  accumlates all (non '<') characters, till parser again encounters '"' where this time the accumlated string is treaded as attribute value as a result an attribute pair is parsed
	
	The above process is repeated till all the attributes are collected.
	
================================================================================================================

 17 A.
 	The way to identify the empty element is by observing if a '/' character is present before '>' of start tag and if parser finds one like that it triggers a start element event and an end element event without any characters between them.
 	
================================================================================================================

24 A.

	Given question gives 6 ways to identify the ignorable-whitespace characters. 
	1. immediately following some element’s start tag and immediately before another element’s start tag. 
		By skipping the ignorable-whitespace characters after start tag (skipConsecutiveWhitespaces()) before the while loop in readElement() method.
	
	2. immediately following some element’s start tag and immediately before that element’s end tag.
		Means the entire chartext is ignorable-whitespace it is handled by skipping over the ignorable-whitespace characters in char-text (this is done by 2 methods removeIgnorableWhiteSpaceCharactersAtEnd() and removeIgnorableWhiteSpaceCharactersAtStart()).
	
	3. immediately following some element’s start tag and immediately before some nonwhitespace character data.
		This is handled by skipping over ignorable-whitespace characters at the begining of the char-text. By calling removeIgnorableWhiteSpaceCharactersAtStart() method.
	
	4. immediately following some non-whitespace data and immediately before some element’s end tag.
		This is handled by skipping over ignorable-whitespace characters at the end of the char-text. By calling removeIgnorableWhiteSpaceCharactersAtEnd() method.
		 
 	5. immediately following some element’s end tag and immediately before another element’s start tag.
 		This is handled by calling skipConsecutiveWhitespaces(); after reading the element (child) readElement() in (parent) element readElement() method.
 		
 	6. immediately following some element’s end tag and immediately before another element’s end tag.
		This is handled by calling skipConsecutiveWhitespaces(); after reading the element (child) readElement() in (parent) element readElement() method.
		
