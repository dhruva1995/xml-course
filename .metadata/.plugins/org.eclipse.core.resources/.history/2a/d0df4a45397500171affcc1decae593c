package cscie259.project1.mf;

import java.util.LinkedHashMap;
import java.util.LinkedList;
import java.util.Map;
import java.util.Map.Entry;

import com.sun.jndi.ldap.EntryChangeResponseControl;

/**
 * A simplified version of org.xml.sax.helpers.AttributesImpl.
 *
 * An Attributes object stores zero or more attributes.
 *
 * You MAY modify this file to whatever extent you see fit, provided you do
 * not change the declarations of addAttribute, getLength, getName, or
 * getValue.
 *
 * @author  Computer Science E-259
 * @version 8.0
 *
 * @author  YOUR NAME GOES HERE
 **/
public class Attributes
{
	
	private final LinkedList<AttributeEntry> attributes_;
	
	/**
	 * @author KH2169
	 * This class represents a pair of attribute name & value
	 */
	private class AttributeEntry implements Map.Entry<String, String>{
		private final String name_, value_;
		public AttributeEntry(String name, String value){
			this.name_ = name;
			this.value_ = value;
		}
		
		@Override
		public String getKey() {
			return this.name_;
		}

		@Override
		public String getValue() {
			return this.value_;
		}

		@Override
		public String setValue(String value) {
			return this.value_;
		}
		
	}
	
	public Attributes() {
		attributes_ = new LinkedList<>();
	}
	
    /**
     * Adds a new attribute (i.e., name/value pair) to the collection.
     *
     * @param name  new attribute's name
     * @param value new attribute's value
     */
    public void addAttribute(String name, String value) {
    	this.attributes_.add(new AttributeEntry(name, value));
    }


    /**
     * Return the number of attributes in the list.
     *
     * @return the number of attributes in the list
     */
    public int getLength() {
        return this.attributes_.size();
    }


    /**
     * Return an attribute's name by index.
     *
     * @param index the attribute's index (zero-based).
     *
     * @return the attribute's name if available else null if the
     * attribute's name is not available or the index is out of range
     */
    public String getName(int index) {
        return this.attributes_.get(index).name_;
    }


    /**
     * Return an attribute's value by index.
     *
     * @param index the attribute's index (zero-based)
     *
     * @return the attribute's value or null if the index is out of range
     */
    public String getValue(int index) {
        return this.attributes_.get(index).value_;
    }
}
